---
export interface Props {
    value: string;
    href?: string;
    variant?: "primary" | "secondary" | "outline" | "ghost";
    size?: "sm" | "md" | "lg";
    target?: "_blank" | "_self";
}

const {
    value,
    href,
    variant = "primary",
    size = "md",
    target = "_self",
} = Astro.props;

const baseClasses =
    "inline-flex items-center justify-center font-medium transition-all duration-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2";

const variants = {
    primary: "bg-theme-accent text-white hover:opacity-90 focus:ring-blue-500",
    secondary:
        "bg-theme-secondary text-theme-primary hover:bg-theme-primary hover:text-theme-secondary border border-theme-primary focus:ring-gray-500",
    outline:
        "border-2 border-theme-primary text-theme-primary hover:bg-theme-primary hover:text-theme-secondary focus:ring-gray-500",
    ghost: "text-theme-primary hover:bg-theme-secondary focus:ring-gray-500",
};

const sizes = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-base",
    lg: "px-6 py-3 text-lg",
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]}`;
---

{
    href ? (
        <a
            href={href}
            target={target}
            class={classes}
            rel={target === "_blank" ? "noopener noreferrer" : undefined}
        >
            {value}
            {target === "_blank" && (
                <svg
                    class="ml-2 w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                    />
                </svg>
            )}
        </a>
    ) : (
        <button class={classes}>{value}</button>
    )
}
