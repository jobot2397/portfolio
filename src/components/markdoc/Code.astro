---
export interface Props {
    code: string;
    language?: string;
    title?: string;
    showLineNumbers?: boolean;
    highlightLines?: string;
}

const {
    code,
    language = "text",
    title,
    showLineNumbers = false,
    highlightLines,
} = Astro.props;

// Parse highlight lines (e.g., "1,3-5,8")
const parseHighlightLines = (lines: string) => {
    if (!lines) return new Set<number>();

    const lineNumbers = new Set<number>();
    lines.split(",").forEach((part) => {
        if (part.includes("-")) {
            const [start, end] = part.split("-").map((n) => parseInt(n.trim()));
            for (let i = start; i <= end; i++) {
                lineNumbers.add(i);
            }
        } else {
            lineNumbers.add(parseInt(part.trim()));
        }
    });

    return lineNumbers;
};

const highlightedLines = parseHighlightLines(highlightLines || "");
const codeLines = code.trim().split("\n");
---

<div
    class="my-6 border border-theme-primary rounded-lg overflow-hidden bg-theme-primary"
>
    {
        title && (
            <div class="bg-theme-secondary px-4 py-2 border-b border-theme-primary">
                <div class="flex items-center gap-2">
                    <div class="flex gap-1">
                        <div class="w-3 h-3 rounded-full bg-red-500" />
                        <div class="w-3 h-3 rounded-full bg-yellow-500" />
                        <div class="w-3 h-3 rounded-full bg-green-500" />
                    </div>
                    <span class="text-theme-primary text-sm font-medium ml-2">
                        {title}
                    </span>
                    {language && (
                        <span class="text-theme-secondary text-xs ml-auto">
                            {language}
                        </span>
                    )}
                </div>
            </div>
        )
    }

    <div class="relative">
        <pre
            class="p-4 overflow-x-auto text-sm text-theme-primary"><code class={`language-${language}`}>{codeLines.map((line, index) => {
            const lineNumber = index + 1;
            const isHighlighted = highlightedLines.has(lineNumber);

            return (
                <div class={`flex ${isHighlighted ? 'bg-yellow-500/20 -mx-4 px-4' : ''}`} data-line={lineNumber}>
                    {showLineNumbers && (
                        <span class="text-theme-muted select-none mr-4 text-right w-8 flex-shrink-0">
                            {lineNumber}
                        </span>
                    )}
                    <span class="flex-1">{line || ' '}</span>
                </div>
            );
        })}</code></pre>
    </div>
</div>
