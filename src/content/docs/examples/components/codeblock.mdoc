---
name: CodeBlock
title: CodeBlock Component Examples
description: Unified component for inline code, code blocks, and terminal commands with Expressive Code
slug: examples/codeblock
updatedDate: 2025-09-15
author: Joseph Lawler
---

# CodeBlock Examples

The CodeBlock component provides a unified interface for displaying code blocks and terminal commands with enhanced styling and functionality.

## Code Blocks

Use `type="code"` for syntax-highlighted code blocks:

### Basic JavaScript

{% codeBlock type="code" language="javascript" content="function greetUser(name) {\n  return `Hello, ${name}!`;\n}\n\nconst message = greetUser('World');\nconsole.log(message);" /%}

### React Component with Title

{% codeBlock type="code" language="tsx" title="UserProfile.tsx" content="interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport default function UserProfile({ user }: { user: User }) {\n  return (\n    <div className=\"user-profile\">\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n    </div>\n  );\n}" /%}

### CSS with Line Numbers

{% codeBlock type="code" language="css" showLineNumbers=true content=".button {\n  background-color: var(--color-primary);\n  color: white;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.button:hover {\n  background-color: var(--color-primary-dark);\n}" /%}

### Python with Highlighted Lines

{% codeBlock type="code" language="python" highlightLines="2,5-7" content="def calculate_fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\n# Example usage\nresult = calculate_fibonacci(10)\nprint(f\"Fibonacci of 10 is: {result}\")" /%}

## Terminal Commands

Use `type="terminal"` for terminal/command-line examples:

### Simple Command

{% codeBlock type="terminal" command="pwd" /%}

### Basic Commands

{% codeBlock type="terminal" command="ls -la" /%}

### Git Commands

{% codeBlock type="terminal" command="git status" title="Git Status Check" /%}

### NPM Installation

{% codeBlock type="terminal" command="npm install astro-expressive-code" /%}

### Custom Prompt

{% codeBlock type="terminal" command="whoami" prompt="user@macbook-pro:~$" title="MacBook Pro Terminal" /%}

### Development Server

{% codeBlock type="terminal" command="npm run dev" title="Development Server" /%}

## Collapsible Code Sections

Use the `collapse` attribute to create collapsible sections in your code blocks:

### Collapsible Function Implementation

{% codeBlock type="code" language="javascript" title="Advanced Data Processing" collapse="5-15" content="// Main function\nfunction processUserData(users) {\n  console.log('Starting data processing...');\n  \n  // Data validation section\n  const validateUser = (user) => {\n    if (!user.email || !user.name) {\n      throw new Error('Invalid user data');\n    }\n    if (!user.email.includes('@')) {\n      throw new Error('Invalid email format');\n    }\n    return true;\n  };\n  \n  // Process each user\n  const processedUsers = users.map(user => {\n    validateUser(user);\n    return {\n      ...user,\n      processedAt: new Date(),\n      status: 'active'\n    };\n  });\n  \n  console.log('Data processing complete');\n  return processedUsers;\n}" /%}

### Collapsible Imports Section

{% codeBlock type="code" language="typescript" title="React Component with Dependencies" collapse="1-8" content="import React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { formatDate, parseDate } from 'date-fns';\nimport { toast } from 'react-hot-toast';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: Date;\n}\n\nexport default function UserManager() {\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  const debouncedSearch = useCallback(\n    debounce((term: string) => {\n      // Search implementation\n    }, 300),\n    []\n  );\n  \n  return (\n    <div className=\"user-manager\">\n      <h1>User Management</h1>\n      {/* Component implementation */}\n    </div>\n  );\n}" /%}

### Collapsible Multiple Sections

{% codeBlock type="code" language="python" title="Machine Learning Pipeline" collapse="1-5,15-25" showLineNumbers=true content="# Import required libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\ndef load_and_preprocess_data(file_path):\n    \"\"\"Load and preprocess the dataset\"\"\"\n    data = pd.read_csv(file_path)\n    \n    # Remove missing values\n    data = data.dropna()\n    \n    # Feature engineering section (collapsible)\n    def create_features(df):\n        df['feature_1'] = df['col_a'] * df['col_b']\n        df['feature_2'] = np.log(df['col_c'] + 1)\n        df['feature_3'] = df['col_d'].apply(lambda x: x**2)\n        return df\n    \n    def normalize_features(df):\n        scaler = StandardScaler()\n        numeric_columns = df.select_dtypes(include=[np.number]).columns\n        df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n        return df\n    \n    # Apply preprocessing\n    data = create_features(data)\n    data = normalize_features(data)\n    \n    return data\n\n# Main execution\nif __name__ == '__main__':\n    dataset = load_and_preprocess_data('data.csv')\n    print(f'Dataset shape: {dataset.shape}')" /%}

## Label Markers

Use label markers to add descriptive text next to specific lines or ranges:

### Function with Labels

{% codeBlock type="code" language="javascript" title="API Handler" content="async function fetchUserData(userId) {\n  const response = await fetch(`/api/users/${userId}`); // [!code highlight]\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch user data'); // [!code error]\n  }\n  \n  const data = await response.json();\n  console.log('User data loaded successfully'); // [!code success]\n  \n  return data;\n}" /%}

### Code with Insertions and Deletions

{% codeBlock type="code" language="javascript" title="Refactored Function" content="function calculateTotal(items) {\n  let total = 0; // [!code --]\n  let sum = 0; // [!code ++]\n  \n  for (const item of items) {\n    total += item.price; // [!code --]\n    sum += item.price * item.quantity; // [!code ++]\n  }\n  \n  return total; // [!code --]\n  return sum; // [!code ++]\n}" /%}

### Warning and Info Labels

{% codeBlock type="code" language="typescript" title="Database Connection" content="import { Pool } from 'pg';\n\nconst pool = new Pool({\n  user: 'admin',\n  password: process.env.DB_PASSWORD, // [!code warning]\n  host: 'localhost',\n  port: 5432,\n  database: 'myapp'\n});\n\n// Always use connection pooling in production // [!code info]\nexport default pool;" /%}
